name: Windows tests

on:
  push:
    branches:
      - woa

jobs:
  windows-clang-ARM64:
    name: Windows CLANG ARM64 C++
    runs-on: windows-11-arm
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    timeout-minutes: 120

    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_DEFAULT_TRIPLET: arm64-windows
      ARROW_HOME: /clang-winarm64
      ARROW_BUILD_SHARED: ON
      ARROW_BUILD_STATIC: OFF
      ARROW_BUILD_TESTS: ON
      ARROW_BUILD_TYPE: release
      ARROW_DATASET: ON
      ARROW_FLIGHT: ON
      ARROW_FLIGHT_SQL: ON
      ARROW_FLIGHT_SQL_ODBC: ON
      ARROW_GANDIVA: ON
      ARROW_GCS: ON
      ARROW_HDFS: OFF
      ARROW_JEMALLOC: OFF
      ARROW_PARQUET: ON
      ARROW_S3: ON
      ARROW_SUBSTRAIT: ON
      ARROW_USE_GLOG: OFF
      ARROW_VERBOSE_THIRDPARTY_BUILD: OFF
      ARROW_WITH_BROTLI: ON
      ARROW_WITH_BZ2: ON
      ARROW_WITH_LZ4: ON
      ARROW_WITH_OPENTELEMETRY: OFF
      ARROW_WITH_SNAPPY: ON
      ARROW_WITH_ZLIB: ON
      ARROW_WITH_ZSTD: ON
      ARROW_CMAKE_ARGS: >-
        -DARROW_PACKAGE_PREFIX=/clang-winarm64
        -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON

    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set MSVC for Windows ARM64
        uses: bus1/cabuild/action/msdevshell@v1
        with:
          architecture: arm64

      - name: Install LLVM
        shell: pwsh
        run: |
          Invoke-WebRequest https://github.com/llvm/llvm-project/releases/download/llvmorg-20.1.8/LLVM-20.1.8-woa64.exe -OutFile LLVM-woa64.exe
          Start-Process -FilePath .\LLVM-woa64.exe -ArgumentList "/S" -Wait
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup vcpkg
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          echo "$env:VCPKG_ROOT" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # Optional: Speed up CI by caching vcpkg build artifacts
      - name: Restore vcpkg cache
        uses: actions/cache@v4
        with:
          path: C:\vcpkg\installed
          key: vcpkg-${{ runner.os }}-arm64-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-arm64-

      - name: Install dependencies via vcpkg
        shell: pwsh
        run: |
          cd $env:VCPKG_ROOT
          .\vcpkg install `
            abseil `
            aws-sdk-cpp[config,cognito-identity,identity-management,s3,sts,transfer] `
            benchmark `
            boost-beast `
            boost-cmake `
            boost-crc `
            boost-filesystem `
            boost-locale `
            boost-multiprecision `
            boost-optional `
            boost-process `
            boost-system `
            boost-variant `
            boost-xpressive `
            brotli `
            bzip2 `
            c-ares `
            curl `
            flatbuffers `
            gflags `
            glog `
            google-cloud-cpp[storage] `
            grpc `
            gtest `
            lz4 `
            openssl `
            orc `
            protobuf `
            rapidjson `
            re2 `
            snappy `
            spdlog `
            sqlite3 `
            thrift `
            utf8proc `
            xsimd `
            zlib `
            zstd `
            --triplet=arm64-windows

      - name: Build Arrow (C++)
        shell: pwsh
        run: |
          $env:CMAKE_BUILD_PARALLEL_LEVEL = $env:NUMBER_OF_PROCESSORS
          .\ci\scripts\cpp_build_arm64.ps1 "$(Get-Location)" "$(Get-Location)\build"
