# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: C++

on:
  push:
    branches:
      - '**'
      - '!dependabot/**'
    tags:
      - '**'
    paths:
      - '.dockerignore'
      - '.github/workflows/cpp.yml'
      - 'ci/conda_env_*'
      - 'ci/docker/**'
      - 'ci/scripts/ccache_setup.sh'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'
      - 'testing'
  pull_request:
    paths:
      - '.dockerignore'
      - '.github/workflows/cpp.yml'
      - 'ci/conda_env_*'
      - 'ci/docker/**'
      - 'ci/scripts/ccache_setup.sh'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'
      - 'testing'

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  ARCHERY_DEBUG: 1
  ARROW_ENABLE_TIMING_TESTS: OFF
  DOCKER_VOLUME_PREFIX: ".docker/"

jobs:
  Windows_ARM64:
    name: ARM64 Windows LLVM CLANG
    runs-on: windows-11-arm
    timeout-minutes: 60
    strategy:
      fail-fast: false
    env:
      ARROW_BOOST_USE_SHARED: OFF
      ARROW_BUILD_BENCHMARKS: ON
      ARROW_BUILD_SHARED: ON
      ARROW_BUILD_STATIC: OFF
      ARROW_BUILD_TESTS: ON
      ARROW_DATASET: ON
      ARROW_FLIGHT: OFF
      ARROW_HDFS: ON
      ARROW_HOME: /usr
      ARROW_JEMALLOC: OFF
      ARROW_MIMALLOC: ON
      ARROW_ORC: ON
      ARROW_PARQUET: ON
      ARROW_SIMD_LEVEL: NEON
      ARROW_SUBSTRAIT: ON
      ARROW_USE_GLOG: OFF
      ARROW_VERBOSE_THIRDPARTY_BUILD: OFF
      ARROW_WITH_BROTLI: OFF
      ARROW_WITH_BZ2: OFF
      ARROW_WITH_LZ4: OFF
      ARROW_WITH_OPENTELEMETRY: OFF
      ARROW_WITH_SNAPPY: ON
      ARROW_WITH_ZLIB: ON
      ARROW_WITH_ZSTD: ON
      BOOST_SOURCE: BUNDLED
      CMAKE_CXX_STANDARD: "17"
      CMAKE_GENERATOR: Ninja
      CMAKE_C_COMPILER: clang-cl
      CMAKE_CXX_COMPILER: clang-cl
      CMAKE_INSTALL_LIBDIR: bin
      CMAKE_INSTALL_PREFIX: /usr
      CMAKE_UNITY_BUILD: ON
    steps:
      - name: Disable Crash Dialogs
        run: |
          reg add `
            "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      
      - name: Checkout Arrow
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Download Timezone Database
        shell: bash
        run: ci/scripts/download_tz_database.sh
      
      - name: Install OpenSSL via vcpkg
        shell: pwsh
        run: |
          Write-Host "Installing OpenSSL via vcpkg for ARM64..."
          
          # Install vcpkg if not already available
          if (-not (Test-Path "C:\vcpkg")) {
              Write-Host "Cloning vcpkg..."
              git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
              C:\vcpkg\bootstrap-vcpkg.bat
          }
          
          # Install OpenSSL for ARM64
          Write-Host "Installing OpenSSL ARM64 via vcpkg..."
          C:\vcpkg\vcpkg.exe install openssl:arm64-windows
          
          # Set environment variables for CMake
          $vcpkgRoot = "C:\vcpkg"
          echo "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_TARGET_TRIPLET=arm64-windows" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # Verify installation
          $opensslPath = "$vcpkgRoot\installed\arm64-windows"
          if (Test-Path "$opensslPath\include\openssl") {
              Write-Host "OpenSSL installed successfully via vcpkg"
              Write-Host "Include path: $opensslPath\include"
              Write-Host "Library path: $opensslPath\lib"
              
              # List the actual library files
              if (Test-Path "$opensslPath\lib") {
                  Write-Host "Available library files:"
                  Get-ChildItem -Path "$opensslPath\lib" -Filter "*.lib" | ForEach-Object { Write-Host "  $($_.Name)" }
              }
          } else {
              Write-Error "vcpkg OpenSSL installation failed"
              exit 1
          }
      
      - name: Install ccache
        shell: bash
        run: |
          ci/scripts/install_ccache.sh 4.6.3 /usr
      
      - name: Setup ccache
        shell: bash
        run: |
          ci/scripts/ccache_setup.sh
      
      - name: ccache info
        id: ccache-info
        shell: bash
        run: |
          echo "cache-dir=$(ccache --get-config cache_dir)" >> $GITHUB_OUTPUT
      
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ steps.ccache-info.outputs.cache-dir }}
          key: cpp-ccache-windows-${{ env.CACHE_VERSION }}-${{ hashFiles('cpp/**') }}
          restore-keys: cpp-ccache-windows-${{ env.CACHE_VERSION }}-
        env:
          CACHE_VERSION: "2022-09-13"
      
      - name: Install LLVM for Win-ARM64
        shell: pwsh
        run: |
          Invoke-WebRequest https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.0/LLVM-21.1.0-woa64.exe -UseBasicParsing -OutFile LLVM-woa64.exe
          $expectedHash = "3f181aecc83d0eb40fb966ce18b97a3602871dbff83fc91745e7e0fd6661a7f7"
          $fileHash = (Get-FileHash -Path "LLVM-woa64.exe" -Algorithm SHA256).Hash
          if ($fileHash -ne $expectedHash) {
            Write-Error "Checksum verification failed. The downloaded file may be corrupted or tampered with."
            exit 1
          }
          Start-Process -FilePath ".\LLVM-woa64.exe" -ArgumentList "/S" -Wait
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Build
        shell: cmd
        run: |
          bash -c "ARROW_CMAKE_ARGS='-DARROW_WITH_OPENSSL=ON -DARROW_S3=OFF -DARROW_FLIGHT=OFF -DBOOST_EXCLUDE_LIBRARIES=mpi;graph_parallel;coroutine -DBOOST_CONTEXT_IMPLEMENTATION=winfib -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=arm64-windows' ci/scripts/cpp_build.sh $(pwd) $(pwd)/build"
    
      - name: Test
        shell: bash
        run: |
          ci/scripts/cpp_test.sh $(pwd) $(pwd)/build
