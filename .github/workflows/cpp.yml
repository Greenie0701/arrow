# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: C++

on:
  push:
    branches:
      - '**'
      - '!dependabot/**'
    tags:
      - '**'
    paths:
      - '.dockerignore'
      - '.github/workflows/cpp.yml'
      - 'ci/conda_env_*'
      - 'ci/docker/**'
      - 'ci/scripts/ccache_setup.sh'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'
      - 'testing'
  pull_request:
    paths:
      - '.dockerignore'
      - '.github/workflows/cpp.yml'
      - 'ci/conda_env_*'
      - 'ci/docker/**'
      - 'ci/scripts/ccache_setup.sh'
      - 'ci/scripts/cpp_*'
      - 'ci/scripts/install_azurite.sh'
      - 'ci/scripts/install_gcs_testbench.sh'
      - 'ci/scripts/install_minio.sh'
      - 'ci/scripts/msys2_*'
      - 'ci/scripts/util_*'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'format/Flight.proto'
      - 'testing'

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  ARCHERY_DEBUG: 1
  ARROW_ENABLE_TIMING_TESTS: OFF
  DOCKER_VOLUME_PREFIX: ".docker/"

jobs:
  Windows_ARM64:
    name: ARM64 Windows LLVM CLANG
    runs-on: windows-11-arm
    timeout-minutes: 60
    strategy:
      fail-fast: false
    env:
      ARROW_BOOST_USE_SHARED: OFF
      ARROW_BUILD_BENCHMARKS: ON
      ARROW_BUILD_SHARED: ON
      ARROW_BUILD_STATIC: OFF
      ARROW_BUILD_TESTS: ON
      ARROW_DATASET: ON
      ARROW_FLIGHT: OFF
      ARROW_HDFS: ON
      ARROW_HOME: /usr
      ARROW_JEMALLOC: OFF
      ARROW_MIMALLOC: ON
      ARROW_ORC: ON
      ARROW_PARQUET: ON
      ARROW_SIMD_LEVEL: NEON
      ARROW_SUBSTRAIT: ON
      ARROW_USE_GLOG: OFF
      ARROW_VERBOSE_THIRDPARTY_BUILD: OFF
      ARROW_WITH_BROTLI: OFF
      ARROW_WITH_BZ2: OFF
      ARROW_WITH_LZ4: OFF
      ARROW_WITH_OPENTELEMETRY: OFF
      ARROW_WITH_SNAPPY: ON
      ARROW_WITH_ZLIB: ON
      ARROW_WITH_ZSTD: ON
      BOOST_SOURCE: BUNDLED
      CMAKE_CXX_STANDARD: "17"
      CMAKE_GENERATOR: Ninja
      CMAKE_C_COMPILER: clang-cl
      CMAKE_CXX_COMPILER: clang-cl
      CMAKE_INSTALL_LIBDIR: bin
      CMAKE_INSTALL_PREFIX: /usr
      CMAKE_UNITY_BUILD: ON
    steps:
      - name: Disable Crash Dialogs
        run: |
          reg add `
            "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      
      - name: Checkout Arrow
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Download Timezone Database
        shell: bash
        run: ci/scripts/download_tz_database.sh
      
      - name: Install OpenSSL for ARM64
        shell: pwsh
        run: |
          # Download OpenSSL ARM64 installer
          $url = "https://slproweb.com/download/Win64ARMOpenSSL_Light-3_5_3.msi"
          $installer = "Win64ARMOpenSSL_Light-3_5_3.msi"
          
          Write-Host "Downloading OpenSSL ARM64..."
          Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing
          
          # Verify file exists
          if (-not (Test-Path $installer)) {
              Write-Error "Failed to download OpenSSL installer"
              exit 1
          }
          
          Write-Host "Installing OpenSSL ARM64..."
          # Install silently with custom install directory
          $installDir = "C:\OpenSSL"
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", $installer, "/quiet", "/norestart", "INSTALLDIR=$installDir" -Wait -NoNewWindow
          
          # Try multiple possible installation paths (ARM64 version installs to OpenSSL-Win64-ARM)
          $possiblePaths = @(
              "C:\Program Files\OpenSSL-Win64-ARM",
              "C:\OpenSSL",
              "C:\Program Files\OpenSSL-Win64",
              "C:\Program Files\OpenSSL",
              "C:\Program Files (x86)\OpenSSL-Win64-ARM",
              "C:\Program Files (x86)\OpenSSL-Win64"
          )
          
          $opensslPath = $null
          foreach ($path in $possiblePaths) {
              Write-Host "Checking for OpenSSL at: $path"
              if (Test-Path $path) {
                  $opensslPath = $path
                  Write-Host "Found OpenSSL at: $opensslPath"
                  break
              }
          }
          
          # If not found in standard locations, search for it
          if (-not $opensslPath) {
              Write-Host "Searching for OpenSSL installation..."
              $searchPaths = Get-ChildItem -Path "C:\Program Files*" -Directory -ErrorAction SilentlyContinue | Where-Object { $_.Name -like "*OpenSSL*" }
              if ($searchPaths) {
                  $opensslPath = $searchPaths[0].FullName
                  Write-Host "Found OpenSSL via search at: $opensslPath"
              }
          }
          
          if ($opensslPath -and (Test-Path $opensslPath)) {
              Write-Host "OpenSSL installed successfully at: $opensslPath"
              
              # Verify required directories exist
              $binPath = Join-Path $opensslPath "bin"
              $includePath = Join-Path $opensslPath "include"
              $libPath = Join-Path $opensslPath "lib"
              
              Write-Host "Checking OpenSSL structure:"
              Write-Host "  Bin path: $binPath - Exists: $(Test-Path $binPath)"
              Write-Host "  Include path: $includePath - Exists: $(Test-Path $includePath)"
              Write-Host "  Lib path: $libPath - Exists: $(Test-Path $libPath)"
              
              # Add to PATH for this session
              if (Test-Path $binPath) {
                  echo "$binPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              }
              
              # Set environment variables for CMake
              echo "OPENSSL_ROOT_DIR=$opensslPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              
              if (Test-Path $includePath) {
                  echo "OPENSSL_INCLUDE_DIR=$includePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              }
              
              # Look for library files
              if (Test-Path $libPath) {
                  $cryptoLib = Get-ChildItem -Path $libPath -Name "*crypto*.lib" | Select-Object -First 1
                  $sslLib = Get-ChildItem -Path $libPath -Name "*ssl*.lib" | Select-Object -First 1
                  
                  if ($cryptoLib) {
                      $cryptoLibPath = Join-Path $libPath $cryptoLib
                      echo "OPENSSL_CRYPTO_LIBRARY=$cryptoLibPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                      Write-Host "  Crypto library: $cryptoLibPath"
                  }
                  
                  if ($sslLib) {
                      $sslLibPath = Join-Path $libPath $sslLib
                      echo "OPENSSL_SSL_LIBRARY=$sslLibPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                      Write-Host "  SSL library: $sslLibPath"
                  }
              }
          } else {
              Write-Error "OpenSSL installation failed - directory not found in any expected location"
              Write-Host "Listing Program Files directories for debugging:"
              Get-ChildItem -Path "C:\Program Files*" -Directory -ErrorAction SilentlyContinue | Where-Object { $_.Name -like "*SSL*" -or $_.Name -like "*OpenSSL*" } | ForEach-Object { Write-Host "  $($_.FullName)" }
              exit 1
          }
          
          # Clean up installer
          Remove-Item $installer -Force
      
      - name: Install ccache
        shell: bash
        run: |
          ci/scripts/install_ccache.sh 4.6.3 /usr
      
      - name: Setup ccache
        shell: bash
        run: |
          ci/scripts/ccache_setup.sh
      
      - name: ccache info
        id: ccache-info
        shell: bash
        run: |
          echo "cache-dir=$(ccache --get-config cache_dir)" >> $GITHUB_OUTPUT
      
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ steps.ccache-info.outputs.cache-dir }}
          key: cpp-ccache-windows-${{ env.CACHE_VERSION }}-${{ hashFiles('cpp/**') }}
          restore-keys: cpp-ccache-windows-${{ env.CACHE_VERSION }}-
        env:
          CACHE_VERSION: "2022-09-13"
      
      - name: Install LLVM for Win-ARM64
        shell: pwsh
        run: |
          Invoke-WebRequest https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.0/LLVM-21.1.0-woa64.exe -UseBasicParsing -OutFile LLVM-woa64.exe
          $expectedHash = "3f181aecc83d0eb40fb966ce18b97a3602871dbff83fc91745e7e0fd6661a7f7"
          $fileHash = (Get-FileHash -Path "LLVM-woa64.exe" -Algorithm SHA256).Hash
          if ($fileHash -ne $expectedHash) {
            Write-Error "Checksum verification failed. The downloaded file may be corrupted or tampered with."
            exit 1
          }
          Start-Process -FilePath ".\LLVM-woa64.exe" -ArgumentList "/S" -Wait
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      
      - name: Build
        shell: cmd
        run: |
          bash -c "ARROW_CMAKE_ARGS='-DARROW_WITH_OPENSSL=ON -DARROW_S3=OFF -DARROW_FLIGHT=OFF -DBOOST_EXCLUDE_LIBRARIES=mpi;graph_parallel;coroutine -DBOOST_CONTEXT_IMPLEMENTATION=winfib -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DOPENSSL_ROOT_DIR=%OPENSSL_ROOT_DIR% -DOPENSSL_INCLUDE_DIR=%OPENSSL_INCLUDE_DIR% -DOPENSSL_CRYPTO_LIBRARY=%OPENSSL_CRYPTO_LIBRARY% -DOPENSSL_SSL_LIBRARY=%OPENSSL_SSL_LIBRARY%' ci/scripts/cpp_build.sh $(pwd) $(pwd)/build"
      
      - name: Test
        shell: bash
        run: |
          ci/scripts/cpp_test.sh $(pwd) $(pwd)/build
